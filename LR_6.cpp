#include <iostream> //подключаем библиотеку ввода вывода
#include <iomanip> //подключаем библиотеку, которая позволяет манипулировать с вводом выводом

using namespace std;

int main() {
    setlocale(LC_ALL, ""); //функция, позволяющая отображать все символы (в том числе кириллицу)
    cout << "Лабораторная работа №6 (Двумерные массивы (матрицы))" << endl << endl; //вывод названия лаботаторной работы в начале программы
    char com = 'y'; //инициализация переменной, которая отвечает за меню 
    while (com != 'n') { //цикл меню
        int Nstroki, Mstolbci; //объявляем переменные, которые отвечают за количество строк и столбцов в матрице
        double maximal_value = 0; //инициализируем переменную, которая отвечает за максимальное значение в матрице
        cout << "Введите количество строк (n): "; //вывод
        cin >> Nstroki; //ввод количества строк в матрице
        cout << "Введите количество столбцов (m): "; //вывод
        cin >> Mstolbci; //ввод количества столбцов в матрице

        double** matrix = new double* [Nstroki]; //инициализация первой динамической матрицы (двумерного массива)
        double** NewMatrix = new double* [Nstroki]; //инициализация второй динамической матрицы (двумерного массива)
        cout << endl << "Исходная матрица: " << endl; //вывод 
        for (int x = 0; x < Nstroki; x++) { //перебор с 0 до количества строк (используем другой индекс)
            int stroka = min(x + 1, Mstolbci); //с каждым проходом берется минимальное число из x+1 или Mstolbci, таким образом получается "лесенка" в начале матрицы и потом срез
            matrix[x] = new double[stroka]; //добавление массива столбцов в каждый элемент строчки
            NewMatrix[x] = new double[stroka]; //добавление массива столбцов в каждый элемент строчки
            for (int y = 0; y < stroka; y++) { //перебор с 0 до количества столбцов (используем другой индекс)
                matrix[x][y] = rand() % 101 - 50; //заполнение исходной матрицы случайными числами
                if (fabs(matrix[x][y]) > maximal_value) //условный оператор: если значение элемента матрицы больше максимального значения элемента матрицы (в начале макс значение равно нулю)
                    maximal_value = fabs(matrix[x][y]); //присваивание макс значению значение элемента
                cout << setw(6) << matrix[x][y]; //вывод матрицы (setw - функция, которая позволяет установить ширину вывода между элементами)
            }
            cout << endl;//перенос на новую строку, чтобы матрица не выводилась в одну строку
        }
        cout << endl << "Максимальный элемент в исходной матрице: " << maximal_value << endl; //вывод
        cout << endl << "Измененная матрица: " << endl; //вывод
        for (int x = 0; x < Nstroki; x++) { //перебор с 0 до количества строк (используем другой индекс)
            int stroka = min(x + 1, Mstolbci); //с каждым проходом берется минимальное число из x+1 или Mstolbci, таким образом получается "лесенка" в начале матрицы и потом срез
            for (int y = 0; y < stroka; y++) { //перебор с 0 до количества столбцов (используем другой индекс)
                NewMatrix[x][y] = matrix[x][y] / maximal_value; //деление каждого элемента матрицы на макс значение исходной матрицы
                cout << setw(6) << fixed << setprecision(1) << NewMatrix[x][y]; //вывод элементов матрицы с округлением до десятых (setw - функция, которая позволяет установить ширину вывода между элементами)
            }
            cout << endl;//перенос на новую строку, чтобы матрица не выводилась в одну строку
        }
        for (int x = 0; x < Nstroki; x++) { //очистка памяти в каждых элементах строк матриц
            delete[] matrix[x]; //очистка памяти в каждом элементе строки исходной матрицы
            delete[] NewMatrix[x]; //очистка памяти в каждом элементе строки измененной матрицы
        }
        delete[] matrix; //очистка памяти исходной матрицы
        delete[] NewMatrix; //очистка памяти измененной матрицы

        cout << "\nПродолжить? (y/n) "; //продолжение меню
        cin >> com; //ввод для меню
    }

}